| ty (AMAKE (e1, e2)) = 
    let val tau_e1 = ty e1 
        val tau_e2 = ty e2 
    in if eqType (tau_e1, INTTY) then (ARRAYTY tau_e2)
        else raise TypeError ("Array size must be of type INT, not " ^
                                "of type " ^ typeString tau_e1)
    end 
| ty (AAT (a, i)) = 
    let val tau_a = ty a
        val tau_i = ty i 
    in if eqType (tau_i, INTTY) then arrayTy (ty a) 
        else raise TypeError ("Array index must be of type INT, not " ^
                                "of type " ^ typeString tau_i)
    end 
| ty (APUT (e1, e2, e3)) = 
    let val tau_val = ty (AAT (e1, e2))
        val tau_e3  = ty e3
    in if eqType (tau_val, tau_e3) then (ARRAYTY tau_e3)
        else raise TypeError ("Given type " ^ typeString tau_e3 ^ 
            "does not match Array type " ^ typeString tau_val)
    end 
| ty (ASIZE a) = 
    let val tau_val = arrayTy (ty a)
    in INTTY 
    end 